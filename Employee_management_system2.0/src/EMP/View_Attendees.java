/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EMP;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Huzaifa Ahmed
 */
public class View_Attendees extends javax.swing.JFrame {

    /**
     * Creates new form View_Attendees
     */
    public View_Attendees() {
        initComponents();
        Tablee();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        Close = new javax.swing.JButton();

        setTitle("Attendence Record");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Table);

        Close.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        Close.setText("Close");
        Close.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(255, 0, 0)));
        Close.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(619, 619, 619)
                .addComponent(Close, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(618, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(Close, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseActionPerformed
this.setVisible(false);        // TODO add your handling code here:
    }//GEN-LAST:event_CloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View_Attendees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View_Attendees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View_Attendees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View_Attendees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View_Attendees().setVisible(true);
            }
        });
    }
private void Tablee()
{try {
    DBConnection db =new DBConnection();
      Connection conect=db.conn;
        String q = "SELECT * FROM Attendata";
        PreparedStatement statement = conect.prepareStatement(q) ;
        db.resultSet  = statement.executeQuery();

        // Create a map to hold the attendance data for each employee ID and date
        Map<String, Map<String, String>> attendanceData = new HashMap<>();

        // Populate the attendance data map
        while (db.resultSet.next()) {
            String employeeID = db.resultSet.getString("employee_id");
            String status = db.resultSet.getString("status");
            String date = db.resultSet.getString("Date");

            // Add or update the attendance data for the employee ID and date
            attendanceData.computeIfAbsent(employeeID, k -> new HashMap<>()).put(date, status);
        }

        // Create the table model with columns for the dates
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Employee ID");

        // Set the dates as column headers
        Set<String> dates = new TreeSet<>(attendanceData.values().stream().flatMap(m -> m.keySet().stream()).collect(Collectors.toSet()));
        for (String date : dates) {
            model.addColumn(date);
        }

        // Populate the table model with the attendance data
        for (Map.Entry<String, Map<String, String>> entry : attendanceData.entrySet()) {
            String employeeID = entry.getKey();
            Map<String, String> employeeAttendance = entry.getValue();
            Object[] row = new Object[dates.size() + 1];
            row[0] = employeeID;
            int column = 1;
            for (String date : dates) {
                row[column] = employeeAttendance.getOrDefault(date, "-");
                column++;
            }
            model.addRow(row);
        }

        // Set the table model to the attendance table
        Table.setModel(model);
        TableColumn idColumn = Table.getColumnModel().getColumn(0);
        idColumn.setPreferredWidth(30);
        for (int i = 1; i < Table.getColumnCount(); i++) {
                TableColumn dateColumn = Table.getColumnModel().getColumn(i);
                dateColumn.setPreferredWidth(60);  // Set the desired width for the date columns
            }
        
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error fetching attendance records: " + ex.getMessage());
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Close;
    private javax.swing.JTable Table;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
